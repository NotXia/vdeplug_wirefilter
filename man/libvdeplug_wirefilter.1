.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "LIBVDEPLUG_WIREFILTER" "1" "April 2023" "VirtualSquare" "Linux User\[aq]s Manual"
.hy
.SH NAME
.PP
\f[C]libvdeplug_wirefilter\f[R] \[en] vdeplug nested module: modify wire
properties
.SH SYNOPSIS
.PP
libvdeplug_wirefilter.so
.SH DESCRIPTION
.PP
Wirefilter is a libvdeplug nested module that allows to manipulate the
properties of the packet flow passing through the plugin.
.PP
This module of libvdeplug4 can be used in any program supporting vde
like \f[C]vde_plug\f[R], \f[C]vdens\f[R], \f[C]kvm\f[R], \f[C]qemu\f[R],
\f[C]user-mode-linux\f[R] and \f[C]virtualbox\f[R].
.PP
The vde_plug_url syntax of this module is the following:
.PP
\ \ \  \f[C]wirefilter://\f[R][ \f[C][\f[R]\f[I]OPTIONS\f[R]\f[C]]\f[R]
]\f[C]{\f[R] \f[I]vde nested url\f[R] \f[C]}\f[R]
.SH OPTIONS
.SS Wire properties
.PP
Wire properties are set with the following format:
.PP
\ \ \ 
[\f[I]direction\f[R]]value[+\f[I]variation\f[R]][\f[I]multiplier\f[R]][\f[I]algorithm\f[R]]
.IP \[bu] 2
\f[I]direction\f[R] specifies the direction of the value (\f[B]LR\f[R]
for left-to-right and \f[B]RL\f[R] for right-to-left, both if not set).
.PD 0
.P
.PD
.IP \[bu] 2
\f[I]variation\f[R] sets a random variation on the value (0 if not set).
.PD 0
.P
.PD
.IP \[bu] 2
\f[I]multiplier\f[R] specifies the unit of measure of the value
(\f[B]K\f[R], \f[B]M\f[R] or \f[B]G\f[R], no multiplier applied by
default).
.PD 0
.P
.PD
.IP \[bu] 2
\f[I]algorithm\f[R] specifies the type of distribution for the variation
(\f[B]U\f[R] for uniform and \f[B]N\f[R] for Gaussian normal, uniform by
default).
.TP
\f[B]\f[CB]delay\f[B]\f[R]
adds extra delay (in milliseconds).
.TP
\f[B]\f[CB]dup\f[B]\f[R]
probability (0-100) of duplicated packets.
Note: 100% causes each packet to be duplicated infinitly.
.TP
\f[B]\f[CB]loss\f[B]\f[R]
probability (0-100) of packets loss.
.TP
\f[B]\f[CB]lostburst\f[B]\f[R]
if not zero, uses Gilbert model for bursty loss.
This is the mean length of lost packet bursts (a two state Markov
chain):
the probability to exit from the faulty state is 1/lostburst and the
probability to
enter the faulty state is loss/(lostburst-(1-loss)).
The loss rate converges to the value of \f[C]loss\f[R].
.TP
\f[B]\f[CB]mtu\f[B]\f[R]
maximum allowed size (in bytes) for packets.
This value is the same for both directions.
.TP
\f[B]\f[CB]bufsize\f[B]\f[R]
maximum size (in bytes) of the packets queue.
Exceeding packets are discarded.
This value is the same for both directions.
.TP
\f[B]\f[CB]bandwidth\f[B]\f[R]
channel bandwidth in bytes/sec.
Sender is not prevented from sending packets, delivery is delayed to
limit the bandwidth to the desired value (like a bottleneck along the
path).
.TP
\f[B]\f[CB]speed\f[B]\f[R]
interface speed in bytes/sec.
Input is blocked for the tramission time of the packet, thus the sender
is prevented from sending too fast.
.TP
\f[B]\f[CB]nofifo\f[B]\f[R]
if set (as flag), it is not guaranteed that packets are delivered in
order (e.g.\ if delayed with different values).
.TP
\f[B]\f[CB]noise\f[B]\f[R]
number of bits damaged/one megabyte.
.SS Blink
.TP
\f[B]\f[CB]blink=path\f[B]\f[R]
if set, a PF_UNIX/DATAGRAM socket is created at the specified path and
for each packet a log message will be sent.
Each log has format:
.RS
.IP
.nf
\f[C]
id direction length (e.g. 6768 LR 44)
\f[R]
.fi
.RE
.TP
\f[B]\f[CB]blinkid=id\f[B]\f[R]
sets the id to be sent for each packet log with \f[C]blink\f[R].
Defaults to Wirefilter pid.
.SS Management
.TP
\f[B]\f[CB]mgmt=path\f[B]\f[R]
creates an unix socket to manage the parameters.
Can be accessed with \f[C]vdeterm\f[R] and used as a remote terminal.
.TP
\f[B]\f[CB]mgmtmode=0700\f[B]\f[R]
access mode of the management socket.
.TP
\f[B]\f[CB]rc=path\f[B]\f[R]
configuration file loaded at Wirefilter startup.
It uses the same syntax of the management interface.
.SS Other
.TP
\f[B]\f[CB]pidfile=path\f[B]\f[R]
saves Wirefilter pid into the specified file.
.SS Markov mode
.PP
Wirefilter provides a more complex set of parameters using a Markov
chain to emulate different states of the link and the transitions
between states.
.PD 0
.P
.PD
Each state is represented by a node.
Markov chain parameters can be set with management commands or rc files
only.
In fact, due to the large number of parameters the command line would
have been unreadable.
.TP
\f[B]\f[CB]markov-numnodes n\f[B]\f[R]
defines the number of different states.
All the parameters of the connection can be defined node by node.
Nodes are numbered starting from zero (to n-1).
.RS
.PP
e.g.:
.IP
.nf
\f[C]
delay 100+10N[4]
\f[R]
.fi
.PP
It is possible to resize the Markov chain at run-time.
New nodes are unreachable and do not have any edge to other states
(i.e.\ each new node has a loopback edge to the node itself with 100%
probability).
When reducing the number of nodes, the weight of the edges towards
deleted nodes is added to the loopback edge.
When the current node of the emulation is deleted, node 0 becomes the
current node.
(The emulation always starts from node 0).
.RE
.TP
\f[B]\f[CB]markov-time ms\f[B]\f[R]
time period (ms) for the markov chain computation.
Each ms microseconds a random number generator decides which is the next
state (default value=100ms).
.TP
\f[B]\f[CB]markov-name n,name\f[B]\f[R]
assign a name to a node of the markov chain.
.TP
\f[B]\f[CB]markov-setnode n\f[B]\f[R]
manually set the current node to the node n.
.TP
\f[B]\f[CB]setedge n1,n2,w\f[B]\f[R]
define an edge between n1 and n2; w is the weight (probability
percentage) of the edge.
The loopback edge (from a node to itself) is always computed as 100%
minus the sum of the weights of outgoing edges.
.TP
\f[B]\f[CB]showedges [ n ]\f[B]\f[R]
list the edges from node n (or from the current node when the command
has no parameters).
Null weight edges are omitted.
.TP
\f[B]\f[CB]showcurrent\f[B]\f[R]
show the current Markov state.
.TP
\f[B]\f[CB]showinfo [ n ]\f[B]\f[R]
show status and information on state (node) n.\ If the parameter is
omitted it shows the status and information on the current state.
.TP
\f[B]\f[CB]markov-debug [ n ]\f[B]\f[R]
set the debug level for the current management connection.
In the actual implementation when n is greater than zero each change of
markov node causes the output of a debug trace.
Debug tracing get disabled when n is zero or the parameter is missing.
.SH EXAMPLES
.PP
Open two terminals.
.PD 0
.P
.PD
In the first terminal run:
.IP
.nf
\f[C]
vdens vxvde://234.0.0.1
ip addr add 10.0.0.1/24 dev vde0
ip link set vde0 up
\f[R]
.fi
.PP
In the second terminal run:
.IP
.nf
\f[C]
vdens wirefilter://[delay=\[dq]LR100\[dq]]{vxvde://234.0.0.1}
ip addr add 10.0.0.2/24 dev vde0
ip link set vde0 up
ping 10.0.0.1
\f[R]
.fi
.PP
Each packet will have a RTT of \[ti]100 ms.
.SH SEE ALSO
.PP
\f[B]vde_plug\f[R](1), \f[B]vdeterm\f[R](1).
